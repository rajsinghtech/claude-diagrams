<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Claude Diagrams</title><link>https://rajsinghtech.github.io/claude-diagrams/</link><description>Recent content on Claude Diagrams</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© Raj Singh</copyright><lastBuildDate>Wed, 23 Jul 2025 00:00:00 -0400</lastBuildDate><atom:link href="https://rajsinghtech.github.io/claude-diagrams/index.xml" rel="self" type="application/rss+xml"/><item><title>Tailscale Kubernetes Operator Proxy Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-k8s-operator-proxy/</link><pubDate>Wed, 23 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-k8s-operator-proxy/</guid><description>This diagram illustrates the Tailscale Kubernetes Operator proxy architecture, showing:
Ingress Proxy: External Tailscale clients accessing Kubernetes services through proxy pods Egress Proxy: Kubernetes workloads connecting to external Tailscale resources ProxyClass Resources: Configuration management for different proxy types Operator Controller: Automated deployment and management of proxy pods Traffic Flows: Secure WireGuard tunnels for both inbound and outbound connections The operator enables seamless integration between Tailscale&amp;rsquo;s zero-trust network and Kubernetes clusters, providing secure connectivity without complex networking configurations.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-k8s-operator-proxy/tailscale-k8s-operator-proxy.svg" /></description></item><item><title>Claude GitHub Action Workflow</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/flowcharts/claude-github-action/</link><pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/flowcharts/claude-github-action/</guid><description>This diagram illustrates how the Claude GitHub Action workflow processes issue comments and updates diagrams in the repository.
flowchart TD A[User creates issue comment with @claude] --> B{Comment contains @claude?} B -->|No| C[Action ignored] B -->|Yes| D[GitHub Action triggered] D --> E[Extract comment content] E --> F[Send request to Claude API] F --> G{Claude generates response} G -->|Diagram update request| H[Claude modifies SVG files] G -->|Code changes| I[Claude updates code files] G -->|Information only| J[Claude posts comment reply] H --> K[Create new branch] I --> K K --> L[Commit changes] L --> M[Create pull request] M --> N[Post PR link as comment] J --> O[End workflow] N --> O subgraph "</description></item><item><title>CI/CD Pipeline Flow</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/flowcharts/ci-cd-pipeline/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/flowcharts/ci-cd-pipeline/</guid><description>This flowchart illustrates a modern CI/CD pipeline showing the flow from code commit through build, test, and deployment stages to production.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/diagrams/flowcharts/ci-cd-pipeline/ci-cd-pipeline.svg" /></description></item><item><title>Claude Diagrams Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/architecture/claude-diagrams-overview/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/architecture/claude-diagrams-overview/</guid><description>This diagram shows the architecture of the Claude Diagrams application, including the Go web server, Hugo static site generator, and GitHub Actions integration.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/diagrams/architecture/claude-diagrams-overview/claude-diagrams-overview.svg" /></description></item><item><title>Tailscale Mesh VPN Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-mesh-vpn-architecture/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-mesh-vpn-architecture/</guid><description>This diagram illustrates the architecture of Tailscale&amp;rsquo;s mesh VPN, showing:
Hybrid control/data plane architecture Peer-to-peer WireGuard connections between nodes DERP relay servers for NAT traversal fallback Centralized coordination server for key exchange and policy distribution &lt;img src="https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-mesh-vpn-architecture/tailscale-mesh-vpn-architecture.svg" /></description></item><item><title>About</title><link>https://rajsinghtech.github.io/claude-diagrams/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/about/</guid><description>This is a demonstration site for the Hugo Gallery theme.</description></item><item><title>Imprint</title><link>https://rajsinghtech.github.io/claude-diagrams/imprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/imprint/</guid><description>(Put your imprint here)</description></item></channel></rss>