<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wireguard on Claude Diagrams</title><link>https://rajsinghtech.github.io/claude-diagrams/tags/wireguard/</link><description>Recent content in wireguard on Claude Diagrams</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© Raj Singh</copyright><lastBuildDate>Thu, 24 Jul 2025 00:00:00 -0400</lastBuildDate><atom:link href="https://rajsinghtech.github.io/claude-diagrams/tags/wireguard/index.xml" rel="self" type="application/rss+xml"/><item><title>Tailscale DERP Connection Establishment Flow</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-derp-connection-flow/</link><pubDate>Thu, 24 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-derp-connection-flow/</guid><description>Overview This diagram shows the detailed connection establishment flow in Tailscale, including DERP home selection, DISCO protocol messages, and the transition from relayed to direct connections.
sequenceDiagram participant NodeA as Node A100.64.1.10 participant Coord as CoordinationServer participant DERP1 as DERP nyc(Nearest) participant DERP2 as DERP fra(Node B Home) participant NodeB as Node B100.64.2.20 Note over NodeA,NodeB: Initial Setup Phase NodeA->>Coord: Get DERP Map Coord-->>NodeA: DERP Server List NodeA->>DERP1: Latency Test NodeA->>DERP2: Latency Test NodeA->>DERP1: Select as DERP Home NodeB->>Coord: Get DERP Map Coord-->>NodeB: DERP Server List NodeB->>DERP2: Select as DERP Home Note over NodeA,NodeB: Connection Establishment NodeA->>Coord: Request to connect to Node B Coord-->>NodeA: Node B info + DERP Home (fra) NodeA->>DERP1: Connect (TLS) NodeA->>DERP2: Connect to Node B's DERP NodeA->>DERP2: DISCO Ping (encrypted) DERP2->>NodeB: Relay DISCO Ping NodeB-->>DERP2: DISCO Pong DERP2-->>NodeA: Relay DISCO Pong Note over NodeA,NodeB: NAT Traversal via DISCO NodeA->>NodeB: Direct DISCO Ping(multiple endpoints) NodeB->>NodeA: Direct DISCO Ping(multiple endpoints) NodeA->>DERP2: CallMeMaybe message DERP2->>NodeB: Relay CallMeMaybe NodeB->>NodeA: Attempt direct connection Note over NodeA,NodeB: Connection Upgrade NodeA&lt;->NodeB: Direct WireGuard tunnel established NodeA--xDERP2: Close relay connection(optional, kept as fallback) style Coord fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000 style DERP1 fill:#f5f5f5,stroke:#455a64,stroke-width:2px,color:#000 style DERP2 fill:#f5f5f5,stroke:#455a64,stroke-width:2px,color:#000 Protocol Details DISCO Messages DISCO Ping: Contains transaction ID + sender&amp;rsquo;s WireGuard public key DISCO Pong: Returns sender&amp;rsquo;s observed IP:port (STUN-like functionality) CallMeMaybe: Requests recipient to initiate connection back to sender Connection States DERP Home Selection: Each node selects nearest DERP based on latency Initial Relay: All traffic flows through DERP servers Parallel Discovery: DISCO protocol attempts direct connection Connection Upgrade: Seamless switch to direct P2P when successful</description></item><item><title>Tailscale Kubernetes Operator Proxy Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-k8s-operator-proxy/</link><pubDate>Wed, 23 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-k8s-operator-proxy/</guid><description>This diagram illustrates the Tailscale Kubernetes Operator proxy architecture, showing:
Ingress Proxy: External Tailscale clients accessing Kubernetes services through proxy pods Egress Proxy: Kubernetes workloads connecting to external Tailscale resources ProxyClass Resources: Configuration management for different proxy types Operator Controller: Automated deployment and management of proxy pods Traffic Flows: Secure WireGuard tunnels for both inbound and outbound connections The operator enables seamless integration between Tailscale&amp;rsquo;s zero-trust network and Kubernetes clusters, providing secure connectivity without complex networking configurations.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-k8s-operator-proxy/tailscale-k8s-operator-proxy.svg" /></description></item><item><title>Tailscale Mesh VPN Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-mesh-vpn-architecture/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-mesh-vpn-architecture/</guid><description>This diagram illustrates the architecture of Tailscale&amp;rsquo;s mesh VPN, showing:
Hybrid control/data plane architecture Peer-to-peer WireGuard connections between nodes DERP relay servers for NAT traversal fallback Centralized coordination server for key exchange and policy distribution &lt;img src="https://rajsinghtech.github.io/claude-diagrams/diagrams/network/tailscale-mesh-vpn-architecture/tailscale-mesh-vpn-architecture.svg" /></description></item></channel></rss>