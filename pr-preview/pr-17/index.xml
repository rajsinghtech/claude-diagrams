<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Claude Diagrams</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/</link><description>Recent content on Claude Diagrams</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© Raj Singh</copyright><lastBuildDate>Thu, 24 Jul 2025 00:00:00 -0400</lastBuildDate><atom:link href="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic DERP Relay Flow</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-udp-relay-flow/</link><pubDate>Thu, 24 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-udp-relay-flow/</guid><description>Overview This diagram illustrates the basic DERP relay flow in Tailscale, showing how DERP (Designated Encrypted Relay Points) servers facilitate connection establishment and serve as fallback relays when direct peer-to-peer connections are not possible.
graph TD subgraph "Node A Network" NodeA[Node A100.64.1.10Behind NAT] end subgraph "DERP Infrastructure" DERP[DERP Servernyc.derp.exampleRelay Only] end subgraph "Node B Network" NodeB[Node B100.64.2.20Behind NAT] end subgraph "Connection Flow" NodeA -->|1. Initial Connectionvia DERP| DERP DERP -->|2. Relay EncryptedWireGuard Traffic| NodeB NodeA -.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-udp-relay-flow/tailscale-udp-relay-flow.svg" /></description></item><item><title>Tailscale DERP Connection Establishment Flow</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-derp-connection-flow/</link><pubDate>Thu, 24 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-derp-connection-flow/</guid><description>Overview This diagram shows the detailed connection establishment flow in Tailscale, including DERP home selection, DISCO protocol messages, and the transition from relayed to direct connections.
sequenceDiagram participant NodeA as Node A100.64.1.10 participant Coord as CoordinationServer participant DERP1 as DERP nyc(Nearest) participant DERP2 as DERP fra(Node B Home) participant NodeB as Node B100.64.2.20 Note over NodeA,NodeB: Initial Setup Phase NodeA->>Coord: Get DERP Map Coord-->>NodeA: DERP Server List NodeA->>DERP1: Latency Test NodeA->>DERP2: Latency Test NodeA->>DERP1: Select as DERP Home NodeB->>Coord: Get DERP Map Coord-->>NodeB: DERP Server List NodeB->>DERP2: Select as DERP Home Note over NodeA,NodeB: Connection Establishment NodeA->>Coord: Request to connect to Node B Coord-->>NodeA: Node B info + DERP Home (fra) NodeA->>DERP1: Connect (TLS) NodeA->>DERP2: Connect to Node B's DERP NodeA->>DERP2: DISCO Ping (encrypted) DERP2->>NodeB: Relay DISCO Ping NodeB-->>DERP2: DISCO Pong DERP2-->>NodeA: Relay DISCO Pong Note over NodeA,NodeB: NAT Traversal via DISCO NodeA->>NodeB: Direct DISCO Ping(multiple endpoints) NodeB->>NodeA: Direct DISCO Ping(multiple endpoints) NodeA->>DERP2: CallMeMaybe message DERP2->>NodeB: Relay CallMeMaybe NodeB->>NodeA: Attempt direct connection Note over NodeA,NodeB: Connection Upgrade NodeA&lt;->NodeB: Direct WireGuard tunnel established NodeA--xDERP2: Close relay connection(optional, kept as fallback) style Coord fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000 style DERP1 fill:#f5f5f5,stroke:#455a64,stroke-width:2px,color:#000 style DERP2 fill:#f5f5f5,stroke:#455a64,stroke-width:2px,color:#000 Protocol Details DISCO Messages DISCO Ping: Contains transaction ID + sender&amp;rsquo;s WireGuard public key DISCO Pong: Returns sender&amp;rsquo;s observed IP:port (STUN-like functionality) CallMeMaybe: Requests recipient to initiate connection back to sender Connection States DERP Home Selection: Each node selects nearest DERP based on latency Initial Relay: All traffic flows through DERP servers Parallel Discovery: DISCO protocol attempts direct connection Connection Upgrade: Seamless switch to direct P2P when successful</description></item><item><title>Tailscale NAT Traversal and Fallback Mechanism</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-nat-traversal-fallback/</link><pubDate>Thu, 24 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-nat-traversal-fallback/</guid><description>Overview This diagram illustrates Tailscale&amp;rsquo;s sophisticated NAT traversal techniques and the decision flow for using direct connections versus DERP relay fallback.
graph TD Start[Connection Request] --> GetInfo[Gather Network Info] GetInfo --> STUN[STUN DiscoveryGet Public IP:Port] GetInfo --> UPnP[Try UPnP/NAT-PMPPort Mapping] GetInfo --> Local[Detect LocalNetwork Interfaces] STUN --> Analysis{Analyze NAT Type} UPnP --> Analysis Local --> Analysis Analysis -->|Easy NAT| EasyNAT[Full Cone NATor Port Restricted] Analysis -->|Hard NAT| HardNAT[Symmetric NATor CGNAT] Analysis -->|No UDP| NoUDP[UDP BlockedTCP Only] EasyNAT --> DirectAttempt[Attempt DirectConnection] HardNAT --> AdvancedNAT[Advanced NATTraversal] DirectAttempt --> SimulTX[SimultaneousTransmission] SimulTX --> DISCO[DISCO ProtocolEndpoint Discovery] AdvancedNAT --> Birthday[Birthday ParadoxPort Prediction] AdvancedNAT --> MultiPath[Try MultipleSource Ports] Birthday --> DISCO MultiPath --> DISCO DISCO --> Success{ConnectionEstablished?</description></item><item><title>Tailscale Kubernetes Operator Proxy Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-k8s-operator-proxy/</link><pubDate>Wed, 23 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-k8s-operator-proxy/</guid><description>This diagram illustrates the Tailscale Kubernetes Operator proxy architecture, showing:
Ingress Proxy: External Tailscale clients accessing Kubernetes services through proxy pods Egress Proxy: Kubernetes workloads connecting to external Tailscale resources ProxyClass Resources: Configuration management for different proxy types Operator Controller: Automated deployment and management of proxy pods Traffic Flows: Secure WireGuard tunnels for both inbound and outbound connections The operator enables seamless integration between Tailscale&amp;rsquo;s zero-trust network and Kubernetes clusters, providing secure connectivity without complex networking configurations.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-k8s-operator-proxy/tailscale-k8s-operator-proxy.svg" /></description></item><item><title>Claude GitHub Action Workflow</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/flowcharts/claude-github-action/</link><pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/flowcharts/claude-github-action/</guid><description>This diagram illustrates how the Claude GitHub Action workflow processes issue comments and updates diagrams in the repository.
flowchart TD A[User creates issue comment with @claude] --> B{Comment contains @claude?} B -->|No| C[Action ignored] B -->|Yes| D[GitHub Action triggered] D --> E[Extract comment content] E --> F[Send request to Claude API] F --> G{Claude generates response} G -->|Diagram update request| H[Claude modifies SVG files] G -->|Code changes| I[Claude updates code files] G -->|Information only| J[Claude posts comment reply] H --> K[Create new branch] I --> K K --> L[Commit changes] L --> M[Create pull request] M --> N[Post PR link as comment] J --> O[End workflow] N --> O subgraph "</description></item><item><title>Tailscale Session Recorder Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/system-design/tailscale-recorder-architecture/</link><pubDate>Fri, 24 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/system-design/tailscale-recorder-architecture/</guid><description>Overview This diagram illustrates the architecture and data flow of Tailscale&amp;rsquo;s SSH session recording feature, showing how terminal sessions are captured, streamed, and stored securely within a tailnet.
graph TB subgraph "User Workstation" U[User] -->|SSH Connection| TC[Tailscale Client] end subgraph "Tailscale SSH Server Node" TC -->|WireGuard Tunnel| TS[Tailscale SSH Server] TS --> SR[Session Recorder Client] SR --> TIO[Terminal I/O Wrapper] TIO --> ASC[Asciinema Formatter] end subgraph "Control Plane" CP[Coordination Server] -.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/system-design/tailscale-recorder-architecture/tailscale-recorder-overview.svg" /></description></item><item><title>CI/CD Pipeline Flow</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/flowcharts/ci-cd-pipeline/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/flowcharts/ci-cd-pipeline/</guid><description>This flowchart illustrates a modern CI/CD pipeline showing the flow from code commit through build, test, and deployment stages to production.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/flowcharts/ci-cd-pipeline/ci-cd-pipeline.svg" /></description></item><item><title>Claude Diagrams Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/architecture/claude-diagrams-overview/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/architecture/claude-diagrams-overview/</guid><description>This diagram shows the architecture of the Claude Diagrams application, including the Go web server, Hugo static site generator, and GitHub Actions integration.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/architecture/claude-diagrams-overview/claude-diagrams-overview.svg" /></description></item><item><title>Tailscale Mesh VPN Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-mesh-vpn-architecture/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-mesh-vpn-architecture/</guid><description>This diagram illustrates the architecture of Tailscale&amp;rsquo;s mesh VPN, showing:
Hybrid control/data plane architecture Peer-to-peer WireGuard connections between nodes DERP relay servers for NAT traversal fallback Centralized coordination server for key exchange and policy distribution &lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-mesh-vpn-architecture/tailscale-mesh-vpn-architecture.svg" /></description></item><item><title>About</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/about/</guid><description>This is a demonstration site for the Hugo Gallery theme.</description></item><item><title>Imprint</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/imprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/imprint/</guid><description>(Put your imprint here)</description></item></channel></rss>