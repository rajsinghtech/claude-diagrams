<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mesh-vpn on Claude Diagrams</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/tags/mesh-vpn/</link><description>Recent content in mesh-vpn on Claude Diagrams</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© Raj Singh</copyright><lastBuildDate>Thu, 24 Jul 2025 00:00:00 -0400</lastBuildDate><atom:link href="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/tags/mesh-vpn/index.xml" rel="self" type="application/rss+xml"/><item><title>Tailscale UDP Peer Relay Flow</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-udp-relay-flow/</link><pubDate>Thu, 24 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-udp-relay-flow/</guid><description>Overview This diagram illustrates the basic UDP peer relay flow in Tailscale, showing how DERP (Designated Encrypted Relay Points) servers facilitate connection establishment and serve as fallback relays when direct peer-to-peer connections are not possible.
graph TD subgraph "Node A Network" NodeA[Node A100.64.1.10Behind NAT] end subgraph "DERP Infrastructure" DERP[DERP Servernyc.derp.exampleRelay Only] end subgraph "Node B Network" NodeB[Node B100.64.2.20Behind NAT] end subgraph "Connection Flow" NodeA -->|1. Initial Connectionvia DERP| DERP DERP -->|2.</description></item><item><title>Tailscale Kubernetes Operator Proxy Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-k8s-operator-proxy/</link><pubDate>Wed, 23 Jul 2025 00:00:00 -0400</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-k8s-operator-proxy/</guid><description>This diagram illustrates the Tailscale Kubernetes Operator proxy architecture, showing:
Ingress Proxy: External Tailscale clients accessing Kubernetes services through proxy pods Egress Proxy: Kubernetes workloads connecting to external Tailscale resources ProxyClass Resources: Configuration management for different proxy types Operator Controller: Automated deployment and management of proxy pods Traffic Flows: Secure WireGuard tunnels for both inbound and outbound connections The operator enables seamless integration between Tailscale&amp;rsquo;s zero-trust network and Kubernetes clusters, providing secure connectivity without complex networking configurations.&lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-k8s-operator-proxy/tailscale-k8s-operator-proxy.svg" /></description></item><item><title>Tailscale Mesh VPN Architecture</title><link>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-mesh-vpn-architecture/</link><pubDate>Thu, 23 Jan 2025 00:00:00 -0500</pubDate><guid>https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-mesh-vpn-architecture/</guid><description>This diagram illustrates the architecture of Tailscale&amp;rsquo;s mesh VPN, showing:
Hybrid control/data plane architecture Peer-to-peer WireGuard connections between nodes DERP relay servers for NAT traversal fallback Centralized coordination server for key exchange and policy distribution &lt;img src="https://rajsinghtech.github.io/claude-diagrams/pr-preview/pr-17/diagrams/network/tailscale-mesh-vpn-architecture/tailscale-mesh-vpn-architecture.svg" /></description></item></channel></rss>